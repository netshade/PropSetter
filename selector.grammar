@start = selectorOrValue;
@symbols = '=' '==' '!=' '<=' '>=' '<' '>' '||' '&&' '=>';
selectorOrValue = selectorExpr | literalValue | Empty;
selectorExpr = (className clause? targetProperty{0,1});
targetProperty = property;
className = identifier;
orStatement = andStatement orAndStatement*;
orAndStatement = or andStatement;
andStatement = expr andSimpleStatement*;
andSimpleStatement = and expr;
value = property | literalValue;
expr = (unaryExpr comparisonExpr?);
comparisonExpr = operator unaryExpr;
unaryExpr = value;
clause = ('['! (orStatement|Empty) ']'!);
property =  propertyAtoms;
propertyAtoms = propertyAtom propertyAtom*;
propertyAtom = ('.'! identifier);
literalValue = string | num | true | false | self | nil | objFunc;
operator = customOp | contains | gte | lte | gt | lt | eq | ne;
or = ('or' | '||');
and = ('and' | '&&');
lt = ('lt' | '<');
gt = ('gt' | '>');
gte = ('gte' | '>=');
lte = ('lte' | '<=');
eq = ('eq' | '==' | '=');
ne = ('ne' | '!=');
contains = ('=>' | 'contains');
customOp = '@'! identifier;
nil = 'nil';
self = 'self';
false = 'false';
true = 'true';
objFunc = ('@'! identifier '('! (objFuncArgs  | Empty) ')'!);
objFuncArgs = literalValue nextObjFunc*;
nextObjFunc = ','! literalValue;
string = QuotedString;
num = Number;
identifier = /[A-Za-z_][0-9A-Za-z_]+/;
